Mesh Geometry
=============
.. _geometry-mesh:

* The following section deals with :class:`~bpy.types.Object` which are of type 'MESH', containing Mesh Data(Mesh-Object)
* Each :class:`~bpy.types.Object` is exported as a combination of :class:`~pyffi.formats.nif.NifFormat.NiTriShape` and :class:`~pyffi.formats.nif.NifFormat.NiNode`.
* The :class:`~bpy.types.Mesh` is exported to a :class:`~pyffi.formats.nif.NifFormat.NiTriShape`'s :class:`~pyffi.formats.nif.NifFormat.NiTriShapeData`.

**Example:**

#. Start Blender and empty the scene.
#. Create any Mesh-Object to the scene, eg. cube primitive: 

#. Give the Object an appropriate name.

  - In the **Object Tab** 
  - Generic names are automatically generated, unique names help distinguish objects, 

.. Notes:

* The Nif format only supports triangle based geometry.

* Blender quads and n-gons are exported as triangles, which may lead to differences in rendered geometry.

* Strips (:class:`~pyffi.formats.nif.NifFormat.NiTriStrips`) are available but not developer supported
  as they are `unnecessary for current hardware <http://tomsdxfaq.blogspot.com/2005_12_01_archive.html>`_.
  
.. _geometry-doubleside:

Double-Sided Mesh
-----------------

* Each triangle is composed of 3 vertices, edges and a face.
* To decide which way the face is pointing a vector(normal), perpendicular to the face is used.
* This normal vector can be flipped to either side of the triangle; a common source for triangles appearing to not render. 

Sometimes you want to allow the mesh to ignore the normal and render both sides, eg a cloak.

  - In the **Properties** Editor, in the **Object Data Tab**
  - Enable/Disable **Double Sided**, see notes for more detail.

Double Sided Mesh - Adds a :class:`~pyffi.formats.nif.NifFormat.NiStencilProperty` or similiar, 
  see :ref:`Properties - Stencil Property <properties-stencil>` for more info.

 

.. _geometry-uv:

UV Unwrapping/Mapping
---------------------

* UV-unwrapping is the process of unfolding all the faces onto a flat plane, see `Cube Unwrap <http://en.wikipedia.org/wiki/File:Cube_Representative_UV_Unwrapping.png>`_.
* The UV-unwrapping process creates a UV Map layer.
* The UV Map Layer is used to layer connect a :class:`~bpy.types.Texture` to :class:`~bpy.types.Mesh` and allows visual representation of where each face is located on texture.
* Each :class:`~bpy.types.TextureSlot` requires that the user select the UV Map Layer that was generated by unwrapping, See :ref:`Textures Section <textures>`.

**Example:**
#. :ref:`Create a mesh-object <geometry-mesh>`.
#. In **Edit Mode**, select the faces you want to unwrap.
#. Press U``, select **Unwrap > Smart UV Project**.

**Notes:**

* UV-unwrapping adds a :class:`~bpy.types.MeshTextureFaceLayer` to the Object.
* Although Blender allows multiple :class:`~bpy.types.MeshTextureFaceLayer`, most versions of the Nif format only support one UV layer


.. _geometry-vertexcolor:

Vertex Color
------------

**Example:**

#. :ref:`Create a mesh-object <geometry-mesh>`.
#. Switch to Vertex Paint mode, this automatically adds a base vertex colour layer.
#. Apply the desired vertex colours evenly to the vertex.
#. Ensure you have added a :ref:`material<properties-material-settings>`.

**Notes:**

* The Nif format only supports a single colour per vertex, whereas Blender vertex colour per face vertex.
* Blender treats the vertex as if the faces had been split apart, each face can have a different colour for that vertex.
* `This image should clarify per-face vertex colouring <http://i211.photobucket.com/albums/bb189/NifTools/Blender/documentation/per_face_vertex_color.jpg>`_
* On export, the scripts will take an average of colours. 

.. _geometry-vertexalpha:

Vertex Alpha
------------

Vertex alpha is handled in the same way as vertex colour. The only difference is that vertex alpha use the grey scale.
   
**Example:**

#. :ref:`Create a mesh-object <geometry-mesh>`.
	you will need to add a second layer manually by clicking the + button in the vertex colors 
	control panel located in the object data menu.
	use the slider on the right side to change the level of shading with white being fully visible
	and black being fully transparent.
#. Switch to Vertex Paint mode, If there are no vertex colour layers this will create a new layer.
#. In the brush menu on the left side of the screen, leave the colour selector in the centre and 
#. Apply the shading to the vertices just as you would for :ref:`Vertex Color <geometry-vertexcolor>`

**Notes:**

	* Vertex alpha must use the second vertex color layer, even if there is no color applied in first color layer the default color layer must be in place.
   


