from io_scene_nif.utility.nif_logging import NifLog


def import_texture_effect(self, b_mat, texture_effect):
    self.env_map = self.import_image_texture(b_mat, texture_effect)


def import_texture_extra_shader(self, b_mat, n_texture_prop, extra_datas):
    # extra texture shader slots
    for shader_tex_desc in n_texture_prop.shader_textures:

        if not shader_tex_desc.is_used:
            continue

        # it is used, figure out the slot it is used for
        for extra in extra_datas:
            if extra.integer_data == shader_tex_desc.map_index:
                shader_name = extra.name
                break
        else:
            NifLog.warn("No slot for shader texture {0}.".format(shader_tex_desc.texture_data.source.file_name))
            continue
        try:
            extra_shader_index = (self.nif_import.EXTRA_SHADER_TEXTURES.index(shader_name))
        except ValueError:
            # shader_name not in self.EXTRA_SHADER_TEXTURES
            NifLog.warn("No slot for shader texture {0}.".format(shader_tex_desc.texture_data.source.file_name))
            continue

        self.import_shader_by_type(shader_tex_desc, extra_shader_index)


def import_shader_by_type(self, b_mat, shader_tex_desc, extra_shader_index):
    if extra_shader_index == 0:
        # EnvironmentMapIndex
        if shader_tex_desc.texture_data.source.file_name.lower().startswith("rrt_engine_env_map"):
            # sid meier's railroads: env map generated by engine
            # we can skip this
            NifLog.info("Skipping environment map texture. Env Map is generated by Engine")
        env_texture_desc = shader_tex_desc.texture_data
        self.env_map = self.import_image_texture(b_mat, env_texture_desc)

    elif extra_shader_index == 1:
        # NormalMapIndex
        bump_texture_desc = shader_tex_desc.texture_data
        self.bump_map = self.import_image_texture(b_mat, bump_texture_desc)

    elif extra_shader_index == 2:
        # SpecularIntensityIndex
        gloss_texture_desc = shader_tex_desc.texture_data
        self.gloss_map = self.import_image_texture(b_mat, gloss_texture_desc)

    elif extra_shader_index == 3:
        # EnvironmentIntensityIndex (this is reflection)
        reflection_texture_desc = shader_tex_desc.texture_data
        self.reflection_map = self.reflection_map = self.import_image_texture(b_mat, reflection_texture_desc)

    elif extra_shader_index == 4:
        # LightCubeMapIndex
        if shader_tex_desc.texture_data.source.file_name.lower().startswith("rrt_cube_light_map"):
            # sid meier's railroads: light map generated by engine
            # we can skip this
            NifLog.info("Ignoring Env Map as generated by Engine")
        NifLog.warn("Currently not supported. Skipping light cube texture.")

    elif extra_shader_index == 5:
        # ShadowTextureIndex
        NifLog.warn("Currently not supported. Skipping shadow texture.")

    else:
        NifLog.warn("Unknown texture type found in extra_shader_index")
